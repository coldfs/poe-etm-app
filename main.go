package main

import (
	"bufio"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"os"
	"path/filepath"
	"regexp"
	"runtime"
	"strings"
	"time"

	"gopkg.in/ini.v1" // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å ini-—Ñ–∞–π–ª–∞–º–∏
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
type Config struct {
	TelegramBotToken string
	TelegramChatID   string
	CustomPoEPath    string
	PollInterval     time.Duration
}

var (
	buyMessageRegex = regexp.MustCompile(`From .+: .+buy.+`)
	config          Config
)

func main() {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
	if runtime.GOOS != "windows" {
		fmt.Println("–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ Windows!")
		return
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	err := loadConfig()
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v\n", err)
		fmt.Println("–ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
	if config.TelegramBotToken == "YOUR_BOT_TOKEN" || config.TelegramChatID == "YOUR_CHAT_ID" {
		logToUI("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ –∑–∞–¥–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –≤ config.ini")
		logToUI("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.")
	}

	var poePath string

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∫–∞–∑–∞–Ω –ª–∏ –ø—É—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	if config.CustomPoEPath != "" {
		poePath = config.CustomPoEPath
		logToUI("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ config.ini –ø—É—Ç—å: " + poePath)
	} else {
		// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
		poePath, err = findPathOfExileDirectory()
		if err != nil {
			logToUI("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Path of Exile: " + err.Error())
			logToUI("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Path of Exile –≤—Ä—É—á–Ω—É—é –≤ config.ini")

			if runtime.GOOS != "windows" {
				// –í –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç—å
				fmt.Println("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Path of Exile –≤—Ä—É—á–Ω—É—é:")
				reader := bufio.NewReader(os.Stdin)
				poePath, _ = reader.ReadString('\n')
				poePath = strings.TrimSpace(poePath)

				if poePath == "" {
					fmt.Println("–ü—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω. –í—ã—Ö–æ–¥.")
					return
				}
			} else {
				// –î–ª—è Windows —Å —Ç—Ä–µ–π-–∏–∫–æ–Ω–∫–æ–π, –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–∏—Ç config.ini
				for {
					time.Sleep(5 * time.Second)
					err := loadConfig()
					if err == nil && config.CustomPoEPath != "" {
						poePath = config.CustomPoEPath
						logToUI("–ó–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –ø—É—Ç—å –∏–∑ config.ini: " + poePath)
						break
					}
				}
			}
		}
	}

	clientLogFilePath := filepath.Join(poePath, "logs", "Client.txt")
	logToUI("–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ª–æ–≥–∞ Path of Exile: " + clientLogFilePath)

	err = monitorFile(clientLogFilePath)
	if err != nil {
		logToUI("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Ñ–∞–π–ª–∞: " + err.Error())
	}
}

// loadConfig –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ config.ini
func loadConfig() error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
	if _, err := os.Stat("config.ini"); os.IsNotExist(err) {
		// –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		return createDefaultConfig()
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	cfg, err := ini.Load("config.ini")
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å config.ini: %w", err)
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	config.TelegramBotToken = cfg.Section("Telegram").Key("BotToken").String()
	config.TelegramChatID = cfg.Section("Telegram").Key("ChatID").String()
	config.CustomPoEPath = cfg.Section("PathOfExile").Key("CustomPath").String()

	pollInterval := cfg.Section("Settings").Key("PollInterval").MustInt(1)
	config.PollInterval = time.Duration(pollInterval) * time.Second

	// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
	fmt.Printf("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n")
	fmt.Printf("TelegramBotToken: %s\n", config.TelegramBotToken)
	fmt.Printf("TelegramChatID: %s\n", config.TelegramChatID)
	fmt.Printf("CustomPoEPath: %s\n", config.CustomPoEPath)
	fmt.Printf("PollInterval: %v\n", config.PollInterval)

	return nil
}

// createDefaultConfig —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func createDefaultConfig() error {
	// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è INI —Ñ–∞–π–ª–∞
	cfg := ini.Empty()

	// –°–µ–∫—Ü–∏—è Telegram
	telegramSection, _ := cfg.NewSection("Telegram")
	telegramSection.NewKey("BotToken", "YOUR_BOT_TOKEN")
	telegramSection.NewKey("ChatID", "YOUR_CHAT_ID")

	// –°–µ–∫—Ü–∏—è PathOfExile
	poeSection, _ := cfg.NewSection("PathOfExile")
	poeSection.NewKey("CustomPath", "")

	// –°–µ–∫—Ü–∏—è Settings
	settingsSection, _ := cfg.NewSection("Settings")
	settingsSection.NewKey("PollInterval", "1")

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º INI —Ñ–∞–π–ª
	if err := cfg.SaveTo("config.ini"); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å config.ini: %w", err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	config.TelegramBotToken = "YOUR_BOT_TOKEN"
	config.TelegramChatID = "YOUR_CHAT_ID"
	config.CustomPoEPath = ""
	config.PollInterval = 1 * time.Second

	return nil
}

// sendTelegramMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
func sendTelegramMessage(message string) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω—ã –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
	if config.TelegramBotToken == "YOUR_BOT_TOKEN" || config.TelegramChatID == "YOUR_CHAT_ID" {
		return fmt.Errorf("–Ω–µ —É–∫–∞–∑–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram")
	}

	telegramAPI := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", config.TelegramBotToken)

	// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è URL
	escapedMessage := url.QueryEscape(message)

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä parse_mode=MarkdownV2 –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Markdown
	resp, err := http.Get(telegramAPI + "?chat_id=" + config.TelegramChatID + "&text=" + escapedMessage + "&parse_mode=MarkdownV2")
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ API Telegram, –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: %d", resp.StatusCode)
	}

	return nil
}

// monitorFile –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏.
func monitorFile(filePath string) error {
	file, err := os.Open(filePath)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª %s: %w", filePath, err)
	}
	defer file.Close()

	// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
	_, err = file.Seek(0, io.SeekEnd)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞: %w", err)
	}

	reader := bufio.NewReader(file)

	logToUI("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–∞... (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
	logToUI("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø–æ–∫—É–ø–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram...")

	for {
		line, err := reader.ReadString('\n')
		if err != nil {
			if err == io.EOF {
				// –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞, –∂–¥–µ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
				time.Sleep(config.PollInterval)
				continue
			}
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %w", err)
		}

		// –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
		line = strings.TrimRight(line, "\r\n")

		// –í—ã–≤–æ–¥–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥
		logToUI(line)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω—É –ø–æ–∫—É–ø–∫–∏
		if (strings.Contains(line, "I would like to buy your") || strings.Contains(line, "—Ö–æ—á—É –∫—É–ø–∏—Ç—å —É –≤–∞—Å")) && (strings.Contains(line, "@From") || strings.Contains(line, "@–û—Ç")) {
			// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω—ã, –≤–∞–ª—é—Ç—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
			// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±–∞ —è–∑—ã–∫–∞: –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ —Ä—É—Å—Å–∫–∏–π
			match := regexp.MustCompile(`(?:.*?)(?:I would like to buy your|—Ö–æ—á—É –∫—É–ø–∏—Ç—å —É –≤–∞—Å) (.*?) (?:listed for|–∑–∞) ([\d.]+ (chaos|divine|mirror))(?:.*)`).FindStringSubmatch(line)
			if len(match) > 0 {
				itemName := strings.TrimSpace(match[1])
				price := strings.TrimSpace(match[2])

				// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã
				emoji := "üí∞" // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
				if strings.Contains(price, "divine") {
					emoji = "üíé" // –¥–ª—è divine
				} else if strings.Contains(price, "chaos") {
					emoji = "ü™ô" // –¥–ª—è chaos
				} else if strings.Contains(price, "mirror") {
					emoji = "ü™û" // –¥–ª—è mirror
				}

				// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Markdown-—Ä–∞–∑–º–µ—Ç–∫–æ–π –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ —Ü–µ–Ω—ã
				message := fmt.Sprintf("%s *%s* %s", emoji, price, itemName)
				logToUI("–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ: " + message)

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown
				err := sendTelegramMessage(message)
				if err != nil {
					logToUI("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: " + err.Error())
				} else {
					logToUI("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
				}
			} else {
				logToUI("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É: " + line)
			}
		}
	}
}

// logToUI –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ (–∫–æ–Ω—Å–æ–ª—å –∏–ª–∏ UI)
func logToUI(message string) {
	// –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
	fmt.Println(message)

	// –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –≤ Windows —Å UI, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–∫–Ω–æ
	// if runtime.GOOS == "windows" {
	// 	// –í —Ñ–∞–π–ª–µ tray_windows.go –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è AddLogMessage
	// 	AddLogMessage(message)
	// }
}
